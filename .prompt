color_red=$'\001'$(tput setaf 1 2>/dev/null || echo $'\e[31m')$'\002'
color_green=$'\001'$(tput setaf 2 2>/dev/null || echo $'\e[32m')$'\002'
color_blue=$'\001'$(tput setaf 4 2>/dev/null || echo $'\e[34m')$'\002'
color_reset=$'\001'$(tput sgr 0 2>/dev/null || echo $'\e[0m')$'\002'

# dereference git symbolic reference HEAD to get branch name or sha1 of commit
# object and amend by information about current status of staging area
dereference_git_HEAD() {
    local sha1
    sha1=$(git rev-parse --short HEAD 2>&1)
    if [ $? -eq 0 ]; then
        local color_symref=$color_green
        local color_ref=$color_blue
        local dirty=$(git status --porcelain 2>&1)
        if [ ! -z "$dirty" ]; then
            color_symref=$color_red
            color_ref=$color_red
            dirty='*'
        fi
        GIT_HEAD_PROMPT="$color_symref($(git symbolic-ref --quiet --short HEAD)$dirty)$color_reset"
        if [ $? -ne 0 ]; then
            GIT_HEAD_PROMPT="$color_ref[$sha1$dirty]$color_reset"
        fi
    else
        GIT_HEAD_PROMPT=""
    fi
}

# run command before bash takes PS1 to build prompt
PROMPT_COMMAND="dereference_git_HEAD; $PROMPT_COMMAND"
PS1='
\e[32m\u@\h \e[36m\w\e[0m $GIT_HEAD_PROMPT
\$ '
